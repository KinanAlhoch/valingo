<div class="row" style="margin-left: 10px;">
  <%unless @users.blank?%>
    <%@users.each do |user|%>
      <div class="col-md-4">
	<%= link_to user.email, user_path(user) %>
	<span id="<%= user.id %>">
	    offline
	</span>
	<% vline_launch "Launch Web Client", user.id %>
	<span id="call-<%= user.id %>"
	      style="display:none">
		, <a onclick="call('<%= user.id %>')"
	       href="javascript:void(0)">
		    Call
	  </a>
	</span>
	<%= link_to "Unfriend", unfriend_user_path(user) %>
      </div>
    <%end%>
  <%else%>
    You have no Pals
  <%end%>
</div>

<script type="text/javascript">
  var loginToken = "<%= Vline.create_login_token(current_user.id) %>";
  var serviceId = "<%= Vline.service_id %>";
  var authId = "<%= Vline.provider_id %>";
  var profile = {"displayName" : "<%= current_user.email %>"};

  var people = [
<% @users.each do |user| %>
      "<%= user.id %>",
<% end %>
  ];

  var client = vline.Client.create({"serviceId": serviceId, "ui": true});

  var session;

  function call(userId) {
    if (session) {
      session.getPerson(userId)
      .done(function(person) {
	person.startMedia();
      });
    }
  }

  client.on('login', function(e) {
    session = e.target;

    for (var i=0; i < people.length; i++) {
      session.getPerson(people[i])
      .done(function(person) {
	var updatePresence = function(e) {
	  var person = e.target;
	  var presenceState = person.getPresenceState();
	  var shortId = person.getShortId();
	  var elem = document.getElementById(shortId);
	  elem.innerHTML = presenceState;

	  // Show/hide the call link based on presence
	  elem = document.getElementById('call-' + shortId);
	  if (presenceState === "online" && shortId !== "<%= current_user.id %>") {
	    elem.style.display = "";
	  } else {
	    elem.style.display = "none";
	  }
	};

	updatePresence({target: person});
	person.on('change:presenceState', updatePresence);
      });
    }
  });

  client.login(authId, profile, loginToken);



  (function () {
    // Your server should generate a profile for the local user
    LOCAL_USER_PROFILE = {
      displayName: 'User Name'
    };
    AUTH_TOKEN = '<%= Vline.create_login_token(current_user.id) %>'; // Your server should generate and inject an authToken for the local user
    REMOTE_USER_ID = 'REMOTE_USER_ID'; // Your server should set the username of the remote user
    var serviceId = '<%= Vline.service_id %>'; // Set this to your Service ID (constant)
    var session = null;
    var localPerson = null;
    var localStream = null;
    var client = vline.Client.create({serviceId: serviceId, ui: true});
    client.on('add:mediaSession', onMediaSession, this);
    function onMediaSession(e) {
      var mediaSession = e.target;
      mediaSession.on('enterState:incoming', onIncomingMedia);
      mediaSession.on('enterState:closed', function(e) {
	localStream && localStream.stop();
      });
    }
    // Auto-accept incoming call
    function onIncomingMedia(e) {
      var mediaSession = e.target;
      mediaSession.start();
    }
    // Show login or logout button based on current vLine client state
    if (client.isLoggedIn()) {
      session = client.getDefaultSession();
      localPerson = session.getLocalPerson();
      console.log('Local person: ' + localPerson.getId());
      connect();
    } else {
      // We log in with the auth token
      client.login(serviceId, LOCAL_USER_PROFILE, AUTH_TOKEN).done(function(sess) {
	session = sess;
	localPerson = session.getLocalPerson();
	console.log('Local person: ' + localPerson.getId());
	connect();
      });
    }
    // Deterministically call other user, for example userA will always call userB as userA < userB
    function startPeerMediaSession(person) {
      if ((person.getId() != localPerson.getId()) &&
	(person.getId() < localPerson.getId())) {
	if (person.getPresenceState() === 'online') {
	  var m = person.startMedia();
	  console.log('Started media session with person: ' + person.getId());
	}
      }
    }
    function connect() {
      // See if other person is online and start call immediately.
      // The other person will auto accept
      session.getPerson(REMOTE_USER_ID).done(function(p) {
	// This shows a local video while you wait for the other user
	// to show up
	client.getLocalStream().done(function(s) {
	  localStream = s;
	  console.log('Local stream: ' + s.getId());
	  // NOTE: If you want to layout the video elements in a custom manner, you can use
	  // stream.createVideoElement() to create a video element here:
	  // https://vline.com/developer/docs/vline.js/vline.MediaStream#createVideoElement
	}).fail(function (error) {
	  console.log('error: ' + error.message + ' type: ' + error.type);
	});
	startPeerMediaSession(p);
	// If other person is not currently online, this will start the call when they come
	// online
	p.on('change:presenceState', function (e) {
	  if (e.val === 'online') {
	    console.log('User came online, starting mediasession with: ' + p.getId());
	    startPeerMediaSession(p);
	  }
	});
      }, this);
    }
    // Remember to stop local stream and logout when you unload page.
    window.addEventListener('beforeunload', function (event) {
      localStream && localStream.stop();
      session && session.logout();
    });
  })();
</script>


